"First setup your access keys, secret keys and region code locally."
Navigate here

# cd .aws

Add your access key id from the AWS cli like:

enta@NEXUS:~/.aws$ aws configure
AWS Access Key ID [****************QQVH]: "Your AWS Access Key ID"
AWS Secret Access Key [****************ZIAP]: "AWS Access Key ID"
Default region name [us-east-1]: "your region name here"
Default output format [json]: "filetype, usually json"


"Then create a folder on where you want your project to be located"
cd ~
mkdir project-terraform
cd project-terraform



after, create a variables.tf file:
sudo nano variables.tf

 variable "aws_region" {
  description = "AWS Region"
  default     = "us-east-1" #the region your instances are located 
}

variable "key_name" {
  description = " SSH keys to connect to ec2 instance"
  default     =  "grsi-novo"  #the name of your key.pem 
}

variable "instance_type" {
  description = "instance type for ec2"
  default     =  "t2.micro"    #instance type 
}

you can edit if you need to

-------------------------------------------------------------------------------------------------------------

Now you can create your main.tf file:

provider "aws" {
  region = var.aws_region
}


#Create security group with firewall rules
resource "aws_security_group" "security_port" {
  name        = "security_port"
  description = "security group"

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

 ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

 # outbound from server
  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags= {
    Name = "security_port"
  }
}

resource "aws_instance" "myFirstInstance" {
  ami           = "ami-0f9fc25dd2506cf6d"     #ubuntu AMI  but you can use Ec2, just copy from the instance launcher
  key_name = var.key_name
  instance_type = var.instance_type
  security_groups= [ "security_port"]
  tags= {
    Name = "test_instance"
  }
}

# Create Elastic IP address
resource "aws_eip" "myFirstInstance" {
  vpc      = true
  instance = aws_instance.myFirstInstance.id
tags= {
    Name = "test_elastic_ip"
  }
}

After, execute:

#terrafom plan

The above command will show how many resources will be added.
Plan: 3 to add, 0 to change, 0 to destroy.

After confirming your changes execute:

#terraform apply

the following window will pop-up:

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes   #write yes



Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
Now login to EC2 console, to see the new instances up and running  #or refresh if you are already inside EC2 console

List Resources created by Terraform
Execute the below command to view list of the resources created by Terraform.
terraform state list
The above command will list three resources created.



